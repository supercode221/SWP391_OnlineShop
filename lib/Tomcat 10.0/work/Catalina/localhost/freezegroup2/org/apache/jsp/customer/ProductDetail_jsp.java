/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-10-02 09:44:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.customer;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class ProductDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/Acer%20Aspire%207/Desktop/Git/freeze/build/web/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602848772000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1727859905330L));
    _jspx_dependants.put("jar:file:/C:/Users/Acer%20Aspire%207/Desktop/Git/freeze/build/web/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/fmt.tld", Long.valueOf(1602848772000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvalue_005fpattern_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvalue_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvalue_005fpattern_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("        <title>Tên sản phẩm</title>\r\n");
      out.write("        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/footer.css\"/>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/header.css\"/>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/ProductDetails.css\"/>\r\n");
      out.write("        <link rel=\"icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/Image/Favicon/icon2.gif\" type=\"image/gif\">\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        <!-- Header import section -->\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../base-component/header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div class=\"container mt-5\">\r\n");
      out.write("            <div class=\"row align-items-center\">\r\n");
      out.write("                <div class=\"col-md-6\">\r\n");
      out.write("                    <h5><span class=\"badge bg-warning\">New</span></h5>\r\n");
      out.write("                    <div class=\"slideshow\">\r\n");
      out.write("                        <span class=\"arrow arrow-left\" onclick=\"previousImage()\">&#10094;</span>\r\n");
      out.write("                        <img id=\"mainImage\" alt=\"Main Product\" class=\"product-image\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${productDetail.getProductImage().get(0)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                        <span class=\"arrow arrow-right\" onclick=\"nextImage()\">&#10095;</span>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"d-flex mt-3 gap-3 imageforslideshow\">\r\n");
      out.write("                        <div id=\"thumbnailsContainer\" class=\"d-flex gap-3\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div> \r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-md-6 product-info\">\r\n");
      out.write("                    <h1>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${productDetail.getName()}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h1>\r\n");
      out.write("                    <div class=\"price\">\r\n");
      out.write("                        <h3>");
      if (_jspx_meth_fmt_005fformatNumber_005f0(_jspx_page_context))
        return;
      out.write("</h3>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <p class=\"mt-3\">\r\n");
      out.write("                        ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${productDetail.getDescription()}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("                    </p>\r\n");
      out.write("                    <div class=\"mt-3\">\r\n");
      out.write("                        <a class=\"text-decoration-none\" href=\"#\">\r\n");
      out.write("                            <i class=\"fas fa-ruler-combined\"></i> SIZE GUIDE\r\n");
      out.write("                        </a>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"mt-3\">\r\n");
      out.write("                        <h5>Select Size:</h5>\r\n");
      out.write("                        <div class=\"btn-group\" role=\"group\">\r\n");
      out.write("                            ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <p class=\"mt-3\">Selected Size: <span id=\"selectedSizeName\">None</span></p>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    <div class=\"mt-3 color-choose\">\r\n");
      out.write("                        <h5>Select Color:</h5>\r\n");
      out.write("                        <div class=\"btn-group\" role=\"group\" aria-label=\"Color choices\">\r\n");
      out.write("                            ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <p class=\"mt-3\">Selected Color: <span id=\"selectedColorName\">None</span></p>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    <form action=\"addtocart\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"productId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.productId}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                        <input type=\"hidden\" id=\"selectedSizeId\" name=\"sizeId\" />\r\n");
      out.write("                        <input type=\"hidden\" id=\"selectedColorId\" name=\"colorId\" />\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mt-3 d-flex align-items-center\">\r\n");
      out.write("                            <input class=\"form-control\" style=\"width: 60px;\" type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" />\r\n");
      out.write("                            <button class=\"btn btn-danger ms-3\" type=\"submit\">ADD TO CART</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </form>\r\n");
      out.write("                    <div class=\"mt-3\">\r\n");
      out.write("                        <button class=\"btn btn-light\">\r\n");
      out.write("                            <i class=\"far fa-heart\"></i>\r\n");
      out.write("                        </button>\r\n");
      out.write("                        <button class=\"btn btn-light\">\r\n");
      out.write("                            <i class=\"fas fa-random\"></i>\r\n");
      out.write("                        </button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"mt-3\">\r\n");
      out.write("                        <a class=\"text-decoration-none me-3\" href=\"#\">\r\n");
      out.write("                            <i class=\"fas fa-share\"></i> Share\r\n");
      out.write("                        </a>\r\n");
      out.write("                        <a class=\"text-decoration-none me-3\" href=\"#\">\r\n");
      out.write("                            <i class=\"fas fa-share\"></i> Facebook\r\n");
      out.write("                        </a>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Footer import section -->\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../base-component/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <script>\r\n");
      out.write("            var images = [];\r\n");
      out.write("\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fforEach_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("            var currentIndex = 0;\r\n");
      out.write("            var thumbnailIndex = 0;\r\n");
      out.write("            var thumbnailsPerPage = 5;\r\n");
      out.write("\r\n");
      out.write("            function changeImage(src) {\r\n");
      out.write("                var mainImage = document.getElementById('mainImage');\r\n");
      out.write("\r\n");
      out.write("                mainImage.classList.add('fade-out');\r\n");
      out.write("\r\n");
      out.write("                setTimeout(function () {\r\n");
      out.write("                    mainImage.src = src;\r\n");
      out.write("                    mainImage.classList.remove('fade-out');\r\n");
      out.write("                    mainImage.classList.add('fade-in');\r\n");
      out.write("\r\n");
      out.write("                    setTimeout(function () {\r\n");
      out.write("                        mainImage.classList.remove('fade-in');\r\n");
      out.write("                    }, 500);\r\n");
      out.write("                }, 500);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function updateThumbnails() {\r\n");
      out.write("                var thumbnailsContainer = document.getElementById('thumbnailsContainer');\r\n");
      out.write("                thumbnailsContainer.innerHTML = '';  // Clear previous thumbnails\r\n");
      out.write("\r\n");
      out.write("                for (var i = thumbnailIndex; i < Math.min(thumbnailIndex + thumbnailsPerPage, images.length); i++) {\r\n");
      out.write("                    var img = document.createElement('img');\r\n");
      out.write("                    img.src = images[i];\r\n");
      out.write("                    img.alt = 'Thumbnail';\r\n");
      out.write("                    img.className = 'thumbnail';\r\n");
      out.write("                    img.height = 80;\r\n");
      out.write("                    img.width = 60;\r\n");
      out.write("\r\n");
      out.write("                    if (i === currentIndex) {\r\n");
      out.write("                        img.classList.add('active-thumbnail');  // Highlight the active thumbnail\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    img.onclick = (function (src, index) {\r\n");
      out.write("                        return function () {\r\n");
      out.write("                            currentIndex = index;  // Update currentIndex to the clicked thumbnail\r\n");
      out.write("                            changeImage(src);\r\n");
      out.write("                            updateThumbnails();  // Re-render thumbnails with the active one highlighted\r\n");
      out.write("                        };\r\n");
      out.write("                    })(images[i], i);\r\n");
      out.write("                    thumbnailsContainer.appendChild(img);\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function previousImage() {\r\n");
      out.write("                currentIndex = (currentIndex - 1 + images.length) % images.length;\r\n");
      out.write("                changeImage(images[currentIndex]);\r\n");
      out.write("\r\n");
      out.write("                // Automatically update the thumbnail index to keep in sync with image navigation\r\n");
      out.write("                if (currentIndex < thumbnailIndex) {\r\n");
      out.write("                    thumbnailIndex -= thumbnailsPerPage;\r\n");
      out.write("                }\r\n");
      out.write("                updateThumbnails();\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function nextImage() {\r\n");
      out.write("                currentIndex = (currentIndex + 1) % images.length;\r\n");
      out.write("                changeImage(images[currentIndex]);\r\n");
      out.write("\r\n");
      out.write("                // Automatically update the thumbnail index to keep in sync with image navigation\r\n");
      out.write("                if (currentIndex >= thumbnailIndex + thumbnailsPerPage) {\r\n");
      out.write("                    thumbnailIndex += thumbnailsPerPage;\r\n");
      out.write("                }\r\n");
      out.write("                updateThumbnails();\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            updateThumbnails();\r\n");
      out.write("\r\n");
      out.write("            function selectColor(button) {\r\n");
      out.write("                // Remove 'active-color' class from all buttons\r\n");
      out.write("                const colorButtons = document.querySelectorAll('.color-option');\r\n");
      out.write("                colorButtons.forEach(btn => btn.classList.remove('active-color'));\r\n");
      out.write("\r\n");
      out.write("                // Add 'active-color' class to the clicked button\r\n");
      out.write("                button.classList.add('active-color');\r\n");
      out.write("\r\n");
      out.write("                // Get the color ID and name from the clicked button\r\n");
      out.write("                const selectedColorId = button.getAttribute('data-color-id');\r\n");
      out.write("                const selectedColorName = button.getAttribute('data-color-name');\r\n");
      out.write("\r\n");
      out.write("                // Display the selected color in the paragraph\r\n");
      out.write("                document.getElementById('selectedColorName').innerText = selectedColorName;\r\n");
      out.write("\r\n");
      out.write("                // Store the color ID in a hidden input\r\n");
      out.write("                document.getElementById('selectedColorId').value = selectedColorId;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            function getColorID(){\r\n");
      out.write("                return document.getElementById('selectedColorId');\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function selectSize(button) {\r\n");
      out.write("                // Remove 'active-size' class from all size buttons\r\n");
      out.write("                const sizeButtons = document.querySelectorAll('.size-option');\r\n");
      out.write("                sizeButtons.forEach(btn => btn.classList.remove('active-size'));\r\n");
      out.write("\r\n");
      out.write("                // Add 'active-size' class to the clicked button\r\n");
      out.write("                button.classList.add('active-size');\r\n");
      out.write("\r\n");
      out.write("                // Get the size ID and name from the clicked button\r\n");
      out.write("                const selectedSizeId = button.getAttribute('data-size-id');\r\n");
      out.write("                const selectedSizeName = button.getAttribute('data-size-name');\r\n");
      out.write("\r\n");
      out.write("                // Display the selected size in the paragraph\r\n");
      out.write("                document.getElementById('selectedSizeName').innerText = selectedSizeName;\r\n");
      out.write("                document.getElementById('selectedSizeId').value = selectedSizeId;  // Store the size ID\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("\r\n");
      out.write("        <style>\r\n");
      out.write("            .active-thumbnail {\r\n");
      out.write("                border: 2px solid red;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .color-option {\r\n");
      out.write("                width: 40px;\r\n");
      out.write("                height: 40px;\r\n");
      out.write("                margin-right: 10px;\r\n");
      out.write("                border-radius: 50%;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .active-color {\r\n");
      out.write("                border: 3px solid black;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .active-size {\r\n");
      out.write("                background-color: #007bff;\r\n");
      out.write("                color: white;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        </style>\r\n");
      out.write("\r\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fformatNumber_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  fmt:formatNumber
    org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag _jspx_th_fmt_005fformatNumber_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag) _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvalue_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatNumberTag.class);
    boolean _jspx_th_fmt_005fformatNumber_005f0_reused = false;
    try {
      _jspx_th_fmt_005fformatNumber_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatNumber_005f0.setParent(null);
      // /customer/ProductDetail.jsp(38,28) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatNumber_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${productDetail.price}", java.lang.Object.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      // /customer/ProductDetail.jsp(38,28) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatNumber_005f0.setPattern("###,###,###VND");
      int _jspx_eval_fmt_005fformatNumber_005f0 = _jspx_th_fmt_005fformatNumber_005f0.doStartTag();
      if (_jspx_th_fmt_005fformatNumber_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatNumber_0026_005fvalue_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatNumber_005f0);
      _jspx_th_fmt_005fformatNumber_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatNumber_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatNumber_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /customer/ProductDetail.jsp(51,28) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/customer/ProductDetail.jsp(51,28) '${requestScope.attributeList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${requestScope.attributeList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /customer/ProductDetail.jsp(51,28) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("pa");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("                                <button class=\"btn btn-outline-secondary size-option\" \r\n");
            out.write("                                        type=\"button\" \r\n");
            out.write("                                        data-size-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.sizeID}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" \r\n");
            out.write("                                        data-size-name=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.sizeName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write("                                        onclick=\"selectSize(this)\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.sizeName}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</button>\r\n");
            out.write("                            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /customer/ProductDetail.jsp(65,28) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/customer/ProductDetail.jsp(65,28) '${requestScope.attributeList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${requestScope.attributeList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /customer/ProductDetail.jsp(65,28) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("pa");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("                                <button class=\"btn btn-outline-dark color-option\" \r\n");
            out.write("                                        type=\"button\" \r\n");
            out.write("                                        data-color-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.colorID}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" \r\n");
            out.write("                                        data-color-name=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.getColorName()}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write("                                        style=\"background-color: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pa.getColorCode()}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(";\"\r\n");
            out.write("                                        onclick=\"selectColor(this)\"></button>\r\n");
            out.write("                            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f2(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f2 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f2_reused = false;
    try {
      _jspx_th_c_005fforEach_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f2.setParent(null);
      // /customer/ProductDetail.jsp(113,12) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setVar("image");
      // /customer/ProductDetail.jsp(113,12) name = items type = jakarta.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setItems(new org.apache.jasper.el.JspValueExpression("/customer/ProductDetail.jsp(113,12) '${productDetail.getProductImage()}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${productDetail.getProductImage()}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f2 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f2 = _jspx_th_c_005fforEach_005f2.doStartTag();
        if (_jspx_eval_c_005fforEach_005f2 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("            images.push(\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${image}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\");\r\n");
            out.write("            ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f2.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f2.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f2[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f2.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f2.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f2);
      _jspx_th_c_005fforEach_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f2_reused);
    }
    return false;
  }
}
