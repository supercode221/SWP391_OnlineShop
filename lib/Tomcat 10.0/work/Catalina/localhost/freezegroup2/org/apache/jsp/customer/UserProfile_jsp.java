/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-10-02 09:17:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.customer;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import codebase.entity.User;

public final class UserProfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction(null, null, null, null);
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/Acer%20Aspire%207/Desktop/Git/freeze/build/web/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602848772000L));
    _jspx_dependants.put("/WEB-INF/lib/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1727859905330L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("codebase.entity.User");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta charset=\"UTF-8\">\r\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("        <title>User Profile</title>\r\n");
      out.write("        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/UserProfile.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/footer.css\" />\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/asset/CSS/header.css\" />\r\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\r\n");
      out.write("\r\n");
      out.write("    </head>\r\n");
      out.write("\r\n");
      out.write("    <body>\r\n");
      out.write("\r\n");
      out.write("        <!-- Header -->\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../base-component/header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");

                            String message = (String) session.getAttribute("Message");
                            if (message != null) {
        
      out.write("\r\n");
      out.write("        <script>\r\n");
      out.write("            Swal.fire({\r\n");
      out.write("                icon: 'success',\r\n");
      out.write("                title: 'Success',\r\n");
      out.write("                text: '");
      out.print( message );
      out.write("',\r\n");
      out.write("                confirmButtonText: 'OK'\r\n");
      out.write("            });\r\n");
      out.write("        </script>\r\n");
      out.write("        ");

            session.removeAttribute("Message"); 
            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ");
 User user = (User) request.getAttribute("user"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- Main content -->\r\n");
      out.write("        <div class=\"container py-5\">\r\n");
      out.write("            <div class=\"row justify-content-center\">\r\n");
      out.write("                <div class=\"col-md-8\">\r\n");
      out.write("                    <div class=\"card shadow-lg border-0\">\r\n");
      out.write("                        <div class=\"card-body text-center\">\r\n");
      out.write("                            <form id=\"editProfileForm\" action=\"EditProfileController\" method=\"post\" >\r\n");
      out.write("                                <!-- Avatar Image -->\r\n");
      out.write("                                <img src=\"");
      out.print( user.getAvatarImage() );
      out.write("\" id=\"avatarPreview\" class=\"rounded-circle img-fluid mb-3\" alt=\"User Profile Picture\" width=\"150\">\r\n");
      out.write("                                <div class=\"mb-3\">\r\n");
      out.write("                                    <lable for=\"avatarInput\">Avatar</lable>\r\n");
      out.write("                                    <input type=\"text\" class=\"form-control\" name=\"avatarImage\" id=\"avatarInput\">\r\n");
      out.write("                                </div>\r\n");
      out.write("\r\n");
      out.write("                                <!-- User Info Inputs -->\r\n");
      out.write("                                <div class=\"user-info\">\r\n");
      out.write("                                    <div class=\"form-group\">\r\n");
      out.write("                                        <label for=\"firstName\">First Name</label>\r\n");
      out.write("                                        <input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" value=\"");
      out.print( user.getFirstName() );
      out.write("\" >\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                    <div class=\"form-group\">\r\n");
      out.write("                                        <label for=\"lastName\">Last Name</label>\r\n");
      out.write("                                        <input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" value=\"");
      out.print( user.getLastName() );
      out.write("\">\r\n");
      out.write("                                    </div>\r\n");
      out.write("\r\n");
      out.write("                                    <!-- Email Section -->\r\n");
      out.write("                                    <div class=\"form-group\">\r\n");
      out.write("                                        <label for=\"email\">Email</label>\r\n");
      out.write("                                        <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" value=\"");
      out.print( user.getEmail() );
      out.write("\" disabled>\r\n");
      out.write("                                        <div class=\"d-grid gap-2 mt-2\">\r\n");
      out.write("                                            <button type=\"button\" class=\"btn btn-warning\" onclick=\"requestVerificationCode()\">Nhận mã xác thực</button>\r\n");
      out.write("                                        </div>\r\n");
      out.write("                                    </div>\r\n");
      out.write("\r\n");
      out.write("                                    <!-- Form to input verification code -->\r\n");
      out.write("                                    <!--                                    <div id=\"verificationCodeSection\" class=\"form-group mt-3 d-none\">\r\n");
      out.write("                                                                            <label for=\"verificationCode\">Mã xác thực</label>\r\n");
      out.write("                                                                            <input type=\"text\" class=\"form-control\" id=\"verificationCode\" name=\"verificationCode\" placeholder=\"Nhập mã xác thực\" required>\r\n");
      out.write("                                                                            <button type=\"button\" class=\"btn btn-primary mt-2\" onclick=\"submitEmailChange()\">Xác nhận và thay đổi email</button>\r\n");
      out.write("                                                                        </div> day nay-->\r\n");
      out.write("\r\n");
      out.write("                                </div>\r\n");
      out.write("\r\n");
      out.write("                                <!-- Save Button (Disabled by default) -->\r\n");
      out.write("                                <input type=\"submit\" class=\"btn btn-primary mt-3\"  value=\"save\">\r\n");
      out.write("                            </form>\r\n");
      out.write("                            <a href=\"changepassword\">\r\n");
      out.write("                                <button class=\"btn btn-warning mt-3\">Change Password</button>\r\n");
      out.write("                            </a>\r\n");
      out.write("                            <!-- Logout Button -->\r\n");
      out.write("                            <a href=\"LogOut\">\r\n");
      out.write("                                <button class=\"btn btn-danger mt-3\">LOGOUT</button>\r\n");
      out.write("                            </a>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Footer -->\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../base-component/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- JavaScript for live avatar preview and save button activation -->\r\n");
      out.write("        <script>\r\n");
      out.write("            // Preview the selected avatar image\r\n");
      out.write("            function previewAvatar() {\r\n");
      out.write("                const avatarInput = document.getElementById('avatarInput');\r\n");
      out.write("                const avatarPreview = document.getElementById('avatarPreview');\r\n");
      out.write("                const file = avatarInput.files[0];\r\n");
      out.write("                if (file) {\r\n");
      out.write("                    const reader = new FileReader();\r\n");
      out.write("                    reader.onload = function (e) {\r\n");
      out.write("                        avatarPreview.src = e.target.result;\r\n");
      out.write("                    };\r\n");
      out.write("                    reader.readAsDataURL(file);\r\n");
      out.write("                    checkChanges(); // Activate Save button when image changes\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Enable the Save button if any input changes\r\n");
      out.write("            function checkChanges() {\r\n");
      out.write("                const saveButton = document.getElementById('saveButton');\r\n");
      out.write("                saveButton.disabled = false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Request verification code for email change\r\n");
      out.write("            function requestVerificationCode() {\r\n");
      out.write("                const email = document.getElementById('email').value;\r\n");
      out.write("\r\n");
      out.write("                // Basic email format validation\r\n");
      out.write("                const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n");
      out.write("\r\n");
      out.write("                if (email && emailPattern.test(email)) {\r\n");
      out.write("                    // Log the email value to ensure it's captured correctly\r\n");
      out.write("                    console.log(\"Email being sent:\", email);\r\n");
      out.write("\r\n");
      out.write("                    // Send AJAX request to the server to send the verification code\r\n");
      out.write("                    fetch('RequestVerificationCodeServlet', {\r\n");
      out.write("                        method: 'POST',\r\n");
      out.write("                        headers: {\r\n");
      out.write("                            'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("                        },\r\n");
      out.write("                        body: `email=${encodeURIComponent(email)}` // Corrected the use of backticks for template literal\r\n");
      out.write("                    })\r\n");
      out.write("                            .then(response => {\r\n");
      out.write("                                if (!response.ok) {\r\n");
      out.write("                                    throw new Error('Network response was not ok');\r\n");
      out.write("                                }\r\n");
      out.write("                                return response.text();\r\n");
      out.write("                            })\r\n");
      out.write("                            .then(data => {\r\n");
      out.write("                                alert(\"Mã xác thực đã được gửi đến email của bạn.\");\r\n");
      out.write("                                document.getElementById('verificationCodeSection').classList.remove('d-none');\r\n");
      out.write("                            })\r\n");
      out.write("                            .catch(error => {\r\n");
      out.write("                                console.error('Error:', error);\r\n");
      out.write("                                alert(\"Đã xảy ra lỗi khi gửi mã xác thực.\");\r\n");
      out.write("                            });\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert(\"Vui lòng nhập địa chỉ email hợp lệ.\");\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            // Submit verification code and request email change\r\n");
      out.write("            function submitEmailChange() {\r\n");
      out.write("                const verificationCode = document.getElementById('verificationCode').value;\r\n");
      out.write("                const newEmail = document.getElementById('email').value;\r\n");
      out.write("\r\n");
      out.write("                if (verificationCode) {\r\n");
      out.write("                    // Send AJAX request to verify the code and change the email\r\n");
      out.write("                    fetch('VerifyCodeAndChangeEmailServlet', {\r\n");
      out.write("                        method: 'POST',\r\n");
      out.write("                        headers: {\r\n");
      out.write("                            'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("                        },\r\n");
      out.write("                        body: `verificationCode=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${encodeURIComponent(verificationCode)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("&newEmail=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${encodeURIComponent(newEmail)}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0));
      out.write("`\r\n");
      out.write("                    }).then(response => response.text())\r\n");
      out.write("                            .then(data => {\r\n");
      out.write("                                if (data === 'success') {\r\n");
      out.write("                                    alert(\"Email đã được thay đổi thành công.\");\r\n");
      out.write("                                    location.reload(); // Reload the page to reflect the changes\r\n");
      out.write("                                } else {\r\n");
      out.write("                                    alert(\"Mã xác thực không đúng hoặc đã hết hạn.\");\r\n");
      out.write("                                }\r\n");
      out.write("                            }).catch(error => {\r\n");
      out.write("                        alert(\"Đã xảy ra lỗi khi thay đổi email.\");\r\n");
      out.write("                    });\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
